# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: 3.0.2
info:
  version: "1.0.0" # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI requires the version to be a string, but without quotation marks YAML can recognize it as a number.

  title: IPUT-Kernel API Documentation # Replace with your API title
  # Keep it simple. Don't add "API" or version at the end of the string.

  termsOfService: "https://example.com/terms/" # [Optional] Replace with an URL to your ToS
  contact:
    email: contact@example.com # [Optional] Replace with your contact email
    url: "http://example.com/contact" # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://redocly.github.io/openapi-template/logo.png"

  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is an **example** API to demonstrate features of OpenAPI specification
    # Introduction
    This API definition is intended to to be a good starting point for describing your API in 
    [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
    It also demonstrates features of [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and 
    [Redoc](https://github.com/Redocly/Redoc) documentation engine. So beyond the standard OpenAPI syntax we use a few 
    [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification
    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities of the service without access to source
    code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: "https://github.com/Rebilly/generator-openapi-repo"

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
servers:
  - url: "localhost:8003"
    description: Local development mock server
  - url: "localhost:4000"
    description: Local development server
  - url: "https://www.iput-kernel.com"
    description: Production server

components:
  schemas:
    User:
      $ref: "./schema/User.yaml"
    UserResponse:
      $ref: "./schema/UserResponse.yaml"
    Class:
      $ref: "./schema/Class.yaml"
    Elevator:
      $ref: "./schema/Elevator.yaml"
    EnglishClass:
      $ref: "./schema/EnglishClass.yaml"
    Floor:
      $ref: "./schema/Floor.yaml"
    Post:
      $ref: "./schema/Post.yaml"
    Review:
      $ref: "./schema/Review.yaml"
    Room:
      $ref: "./schema/Room.yaml"
    SecretKey:
      $ref: "./schema/SecretKey.yaml"
    Subject:
      $ref: "./schema/Subject.yaml"
    Teacher:
      $ref: "./schema/Teacher.yaml"
    Timetable:
      $ref: "./schema/Timetable.yaml"

paths:
  /register:
    post:
      tags:
        - "auth"
      summary: "Signup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        "200":
          description: "正常に仮登録を完了"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "仮登録完了メッセージ"
                  user:
                    type: string
                    description: "仮登録したユーザのID"
        "400":
          description: "すでに登録されているユーザ"
        "500":
          description: "Internal server error"

  /confirm-email:
    get:
      tags:
        - "auth"
      summary: "Confirm Email"
      description: "メールに送信されたLinkをクリックしてアカウントを認証する際に呼ばれるAPI"
      responses:
        200:
          description: "アカウント認証成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "アカウント認証成功メッセージ"
        400:
          description: "無効なトークン"
        500:
          description: "Internal server error."
      parameters:
        - name: token
          in: query
          description: "resgister APIで送信されたメールに記載されたtoken"
          required: true
          schema:
            type: string

  /login:
    post:
      tags:
        - "auth"
      summary: "User login"
      description: "ログインする際に呼ばれるAPI"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email"
              password:
                type: string
                description: "User's password"
      responses:
        200:
          description: "ログイン成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

        400:
          description: "mail or password が違う"
        404:
          description: "ユーザが存在しない"
        500:
          description: "Internal server error."
